{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Cisco transit VPC: This template creates a dedicated transit VPC with Cisco CSRs for routing traffic. ***NOTE*** You must first subscribe to the appropriate Cisco CSR marketplace BYOL AMI from the AWS Marketplace before you launch this template. Version 1",

  "Parameters" : {
    "KeyName" : {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type" : "AWS::EC2::KeyPair::KeyName",
      "Default" : "Lab"
    },
    "TerminationProtection" : {
      "Description" : "Enable termination protection on the CSR EC2 instances to avoid accidential CSR termination?",
      "Type" : "String",
      "Default" : "Yes",
      "AllowedValues" : ["Yes", "No"]
    },
    "BgpAsn" : {
      "Description" : "BGP ASN to use for Transit VPC.",
      "Type" : "String",
      "Default" : "64512"
    },
    "VpcCidr" : {
      "Description" : "CIDR block for Transit VPC.",
      "Type" : "String",
      "Default" : "100.64.127.224/27"
    },
    "PubSubnet1" : {
      "Description" : "Address range for Transit VPC subnet to be created in AZ1.",
      "Type" : "String",
      "Default" : "100.64.127.224/28"
    },
    "PubSubnet2" : {
      "Description" : "Address range for Transit VPC subnet to be created in AZ2.",
      "Type" : "String",
      "Default" : "100.64.127.240/28"
    },
    "CSRType" : {
      "Description" : "Maximum network througput required for CSR instances.",
      "Type" : "String",
      "Default" : "2x500Mbps",
      "AllowedValues" : [ "2x500Mbps","2x1Gbps", "2x2Gbps", "2x4.5Gbps" ]
    },
    "LicenseModel" : {
      "Description" : "Choose between BYOL (Bring Your Own License) and License Included (Future support) license models. Remember to first subscribe the the appropriate Marketplace AMI!",
      "Type" : "String",
      "Default" : "BYOL",
      "AllowedValues" : ["BYOL", "LicenseIncluded- Not supported"]
    },
    "S3Prefix" : {
      "Description" : "S3 prefix to append before S3 key names.",
      "Type" : "String",
      "Default" : "vpnconfigs/"
    },
    "AddRemoveAccount" : {
      "Description" : "Add or remove additional account.",
      "Type" : "String",
      "Default" : "",
      "AllowedValues" : ["Add", "Remove", ""]      
    }, 
    "AccountId" : {
      "Description" : "Another AWS Account ID to authorize access to VPN Config S3 bucket (for example bucket and KMS key policies).",
      "Type" : "String",
      "Default" : ""
    },
    "SendAnonymousData": {
        "Description": "Choose to send anonymous data to AWS.",
        "Type": "String",
        "Default": "Yes",
        "AllowedValues": [
            "Yes",
            "No"
        ]
    }
  },
  "Conditions" : {
    "AuthorizeAnotherAccount" : {"Fn::Not" : [
	{"Fn::Equals" : [
		{"Ref": "AccountId"}, 
		""
	]}
    ]},
   "EnableTerm" : {"Fn::Equals" : [{"Ref" : "TerminationProtection"}, "Yes"]},
   "SendData" : {"Fn::Equals" : [{"Ref" : "SendAnonymousData"}, "Yes"]}
  },
  "Metadata" : {
    "AWS::CloudFormation::Interface" : {
     "ParameterGroups" : [
      {
        "Label" : { "default":"Cisco CSR Configuration" },
        "Parameters" : [ "CSRType", "KeyName", "LicenseModel", "TerminationProtection" ]
      },
      {
        "Label" : { "default":"AWS Service Configuration" },
        "Parameters" : [ "S3Prefix"]
      },
      {
        "Label" : { "default" : "Network Configuration" },
        "Parameters" : [ "VpcCidr", "PubSubnet1", "PubSubnet2","BgpAsn" ]
      },
      {
        "Label" : { "default" : "Additional Account (Update Stack Allow)" },
        "Parameters" : [ "AddRemoveAccount", "AccountId" ]
      },
      {
        "Label": { "default": "Anonymous Metrics Request" },
        "Parameters": [ "SendAnonymousData" ]
      }
     ],
     "ParameterLabels" : {
      "BgpAsn" : { "default" : "Transit VPC BGP ASN" },
      "VpcCidr" : { "default" : "Transit VPC CIDR Block" },
      "PubSubnet1" : { "default" : "1st Subnet Network" },
      "PubSubnet2" : { "default" : "2nd Subnet Network" },
      "CSRType" : { "default" : "CSR Throughput Requirements" },
      "KeyName" : { "default" : "SSH Key to access CSR" },
      "S3Prefix" : { "default" : "Prefix for S3 Objects" },
      "LicenseModel" : { "default" : "License Model" },
      "TerminationProtection" : { "default" : "Enable Termination Protection" },
      "AccountId" : { "default" : "Additional AWS Account ID (Optional)" },
      "AddRemoveAccount" : { "default" : "Add/Remove Additional AWS account (Optional)"}
     }
    }
  },
  "Mappings" : {
    "Function" : {
      "Configurator" : { 
	"CodeLocation" : "cisco-csr-tvpc-dmvpn/latest/transit-vpc/push-config/transit-vpc-push-cisco-config.zip",
	"CodeRegion" : "us-east-1",
	"Name" : "cisco-configurator",
        "Description": "Transit VPC: This function is invoked when a generic VPN configuration is placed in an S3 bucket - it converts the generic information into Cisco IOS specific commands and pushes the config to transit VPC routers.",
        "Runtime": "python2.7",
        "Timeout": "300",
        "MemorySize": "128"
      },
    "FindReplace" : {
		"S3BucketID" : "%BUCKET_NAME%",
		"S3PrefixID" : "%PREFIX%",
		"Deliminator" : "|"
    },
      "Csr" : {
	"UserName" : "automate",
	"PasswordLength" : "15",
	"PrivateKey" : "prikey.pem",
	"PublicKey" : "pubkey.pem"
      }
    },
    "CsrInstance" : {
      "2x500Mbps"   : { "Type" : "c4.large",   "Bandwidth" : "500000" },
      "2x1Gbps"     : { "Type" : "c3.2xlarge", "Bandwidth" : "1000000" },
      "2x2Gbps"     : { "Type" : "c4.2xlarge", "Bandwidth" : "2000000" },
      "2x4.5Gbps"   : { "Type" : "c4.4xlarge", "Bandwidth" : "4500000" }
    }
  },
  "Resources" : {
    "VPNConfigS3Bucket" : {
      "Type" : "AWS::S3::Bucket"
    },
    "VPNConfigBucketPolicy" : {
      "Type" : "AWS::S3::BucketPolicy",
      "Properties" : {
        "Bucket" : {"Ref" : "VPNConfigS3Bucket" },
        "PolicyDocument": {
          "Statement":[ {
	    "Sid": "DenyUnEncryptedObjectUploads",
	    "Effect": "Deny",
	    "Principal": "*",
	    "Action": "s3:PutObject",
	    "Resource": { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "VPNConfigS3Bucket" },"/",{ "Ref" : "S3Prefix" }, "*" ]]},
	    "Condition": {
		"StringNotEquals": {
		  "s3:x-amz-server-side-encryption": "aws:kms"
		}
	    }
	  },
	  {
        "Sid": "Allow only root account to put and get bucket policy",
	    "Action":["s3:GetBucketPolicy", "s3:PutBucketPolicy"],
	    "Effect":"Allow",
	    "Resource": { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "VPNConfigS3Bucket" }]]},
	    "Principal": {
			"AWS" : [{ "Fn::Join" : ["", ["arn:aws:iam::",{ "Ref" : "AWS::AccountId" }, ":root" ]]}]
	    }},

	  {
        "Sid": "Allow additional account get and put objects",
	    "Action":["s3:GetObject", "s3:PutObject", "s3:PutObjectAcl"],
	    "Effect":"Allow",
	    "Resource": { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "VPNConfigS3Bucket" },"/",{ "Ref" : "S3Prefix" }, "*" ]]},
	    "Principal": {
			"AWS" : [{ "Fn::Join" : ["", ["arn:aws:iam::",{ "Ref" : "AWS::AccountId" }, ":root" ]]}]
	    }},
	  {
     	"Sid": "Allow additional account to delete .tmp objects",
	    "Action":["s3:DeleteObject"],
	    "Effect":"Allow",
	    "Resource": { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "VPNConfigS3Bucket" },"/",{ "Ref" : "S3Prefix" }, "*.tmp" ]]},
	    "Principal": {
			"AWS" : [{ "Fn::Join" : ["", ["arn:aws:iam::",{ "Ref" : "AWS::AccountId" }, ":root" ]]}]
	    }
	  }]
        }
      }
    },
    "KMSKey" : {
      "Type" : "AWS::KMS::Key",
      "Properties" : {
        "Description" : "TransitVPC CMK for S3 SSE-KMS",
        "KeyPolicy" : {
          "Version": "2012-10-17",
          "Id": "transit-vpc-1",
          "Statement": [ {
            "Sid": "Enable IAM User Permissions",
            "Effect": "Allow",
            "Principal": { "AWS": [
		{ "Fn::Join" : ["", ["arn:aws:iam::",{ "Ref" : "AWS::AccountId" }, ":root" ]]}
	    ] },
            "Action": [
              "kms:*"
            ], 
            "Resource": "*"
          },
	  {
            "Sid": "Allow use of the key",
            "Effect": "Allow",
            "Principal": { "AWS": [
		{ "Fn::Join" : ["", ["arn:aws:iam::",{ "Ref" : "AWS::AccountId" }, ":root" ]]},
		{ "Fn::GetAtt" : ["SolutionHelperRole", "Arn"] },
		{ "Fn::GetAtt" : ["CiscoConfigFunctionRole", "Arn"] }
	    ] },
            "Action": [
              "kms:Encrypt",
              "kms:Decrypt",
              "kms:ReEncrypt*",
              "kms:GenerateDataKey*",
              "kms:DescribeKey"
            ], 
            "Resource": "*"
          } ]
        }
      }
    },
    "TransitVPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : { "Ref" : "VpcCidr" },
        "Tags" : [
          { "Key" : "Name", "Value" : "Transit VPC" }
        ]
      }
    },
    "VPCPubSub1" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "TransitVPC" },
        "CidrBlock" : { "Ref" : "PubSubnet1" },
        "AvailabilityZone" : { "Fn::Select": ["0", {"Fn::GetAZs": ""}] },
        "Tags" : [
          { "Key" : "Network", "Value" : "Public" },
          { "Key" : "Name", "Value" : "Transit VPC Subnet1" }
        ]
      }
    },
    "VPCPubSub2" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "TransitVPC" },
        "CidrBlock" : { "Ref" : "PubSubnet2" },
        "AvailabilityZone" : { "Fn::Select": ["1", {"Fn::GetAZs": ""}] },
        "Tags" : [
          { "Key" : "Network", "Value" : "Public" },
          { "Key" : "Name", "Value" : "Transit VPC Subnet2" }
        ]
      }
    },
    "IGW" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags" : [
          { "Key" : "Name", "Value" : "Transit VPC IGW" }
        ]
      }
    },
    "IGWToInternet" : {
       "Type" : "AWS::EC2::VPCGatewayAttachment",
       "Properties" : {
         "VpcId" : { "Ref" : "TransitVPC" },
         "InternetGatewayId" : { "Ref" : "IGW" }
       }
    },
    "VPCRouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "TransitVPC" },
        "Tags" : [
          { "Key" : "Network", "Value" : "Public" },
          { "Key" : "Name", "Value" : "Transit VPC" }
        ]
      }
    },
    "VPCPublicRoute" : {
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "RouteTableId" : { "Ref" : "VPCRouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "IGW" }
      }
    },
    "S3Endpoint" : {
      "Type" : "AWS::EC2::VPCEndpoint",
      "Properties" : {
        "PolicyDocument" : {
          "Version":"2012-10-17",
          "Statement":[{
            "Effect":"Allow",
            "Principal": "*",
            "Action":["s3:*"],
            "Resource":["*"]
          }]
        },
        "RouteTableIds" : [ {"Ref" : "VPCRouteTable"} ],
        "ServiceName" : { "Fn::Join": [ "", [ "com.amazonaws.", { "Ref": "AWS::Region" }, ".s3" ] ] },
        "VpcId" : {"Ref" : "TransitVPC"}
      }
    },
    "VPCPubSubnetRouteTableAssociation1" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "VPCPubSub1" },
        "RouteTableId" : { "Ref" : "VPCRouteTable" }
      }
    },
    "VPCPubSubnetRouteTableAssociation2" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "VPCPubSub2" },
        "RouteTableId" : { "Ref" : "VPCRouteTable" }
      }
    },
    "CsrEip1" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "vpc",
        "InstanceId" : { "Ref" : "VpcCsr1" }
      }
    },
    "CsrEip2" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "vpc",
        "InstanceId" : { "Ref" : "VpcCsr2" }
      }
    },
   "GetAMIRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
         "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
               "Effect": "Allow",
               "Principal": {
                  "Service": ["lambda.amazonaws.com"]
               },
               "Action": ["sts:AssumeRole"]
            }]
         },
         "Policies": [{
            "PolicyName": "lambdalogtocloudwatch",
            "PolicyDocument": {
               "Version": "2012-10-17",
               "Statement": [{
                  "Effect": "Allow",
                  "Action": ["logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents"],
                  "Resource": { "Fn::Join" : ["", ["arn:aws:logs:",{"Ref" : "AWS::Region"},":",{ "Ref" : "AWS::AccountId" }, ":log-group:/aws/lambda/*" ]]}
               },  
                  {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject"
                  ],
                  "Resource": "arn:aws:s3:::cisco-csr-tvpc-dmvpn/latest/transit-vpc/*"
                  }
               ]
            }
         }]
      }
   },   
   "GetAMILambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
         "Code": {
            "ZipFile": {
               "Fn::Join": ["\n", [
               "import json",
               "import boto3",
               "import logging",
               "import ast",
               "import cfnresponse",
               "log = logging.getLogger()",
               "log.setLevel(logging.INFO)",
               "def handler(event, context):",
               "   ami_params = event['ResourceProperties']['GetAMIInfo']",
               "   ami_info = ast.literal_eval(ami_params)",
               "   log.info ('AMI info: {}'.format(ami_info))",
               "   responseData = {}",
               "   s3 = boto3.resource('s3')",
               "   data_file = s3.Object('cisco-csr-tvpc-dmvpn', 'latest/transit-vpc/ami.json')",
               "   data_json = data_file.get()['Body'].read().decode('utf-8')",
               "   data = json.loads(data_json)",
               "   responseData['AMIInfo'] = data['CiscoCsrAMI'][ami_info['REGION']][ami_info['LICENSE_MODEL']]",
               "   log.info ('AMI: {}'.format(responseData['AMIInfo']))",
               "   cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)"
               ]]
            }
         },
         "Handler": "index.handler",
         "MemorySize": "128",
         "Runtime": "python2.7",
         "Timeout": "300",
         "Role": {"Fn::GetAtt": ["GetAMIRole", "Arn"]}
      }
   },
   "GetAMI": {
      "Type": "Custom::LambdaCallout",
      "Properties": {
         "Description": "Get CSR AMI",
         "ServiceToken": {"Fn::GetAtt": ["GetAMILambda", "Arn"]},
         "GetAMIInfo" : { "Fn::Join": ["", [
                "{'REGION' : '",{ "Ref" : "AWS::Region" },"', ",
                "'LICENSE_MODEL' : 'BYOL' ",
                "}"
         ]] }
      }
   },          
    
    "VpcCsr1" : {
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "Comment1" : "Launch Cisco CSR1"
      },
      "Properties" : {
        "InstanceType" : { "Fn::FindInMap" : [ "CsrInstance", { "Ref" : "CSRType" }, "Type"] },
        "KeyName" : { "Ref" : "KeyName" },
        "DisableApiTermination" : {"Fn::If": ["EnableTerm", true, false ]},
        "ImageId"        : {"Fn::GetAtt": ["GetAMI", "AMIInfo"]},
        "SubnetId" : { "Ref" : "VPCPubSub1" },
        "SecurityGroupIds" : [{ "Ref" : "CSRSecurityGroup" }],
        "Tags" : [
          { "Key" : "Name", "Value" : "Transit VPC CSR1" }
        ],
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
	  "ios-config-1=\"username ",
	  { "Fn::FindInMap" : [ "Function", "Csr", "UserName"]},
	  " priv 15 pass ", 
	  { "Fn::GetAtt" : [ "CreateRandomPassword" , "Password" ] },"\"\n",
	  "ios-config-2=\"service password-encryption\"\n",
	  "ios-config-3=\"crypto isakmp policy 200\"\n",
  	"ios-config-4=\"encryption aes 128\"\n",
  	"ios-config-5=\"authentication pre-share\"\n",
	  "ios-config-6=\"group 2\"\n",
  	"ios-config-7=\"lifetime 28800\"\n",
  	"ios-config-8=\"hash sha\"\n",
	  "ios-config-9=\"crypto ipsec transform-set ipsec-prop-vpn-aws esp-aes 128 esp-sha-hmac\"\n",
	  "ios-config-10=\"mode tunnel\"\n",
	  "ios-config-11=\"crypto ipsec df-bit clear\"\n",
	  "ios-config-12=\"crypto isakmp keepalive 10 10 on-demand\"\n",
	  "ios-config-13=\"crypto ipsec security-association replay window-size 1024\"\n",
	  "ios-config-14=\"crypto ipsec fragmentation before-encryption\"\n",
	  "ios-config-15=\"crypto ipsec profile ipsec-vpn-aws\"\n",
	  "ios-config-16=\"set pfs group2\"\n",
	  "ios-config-17=\"set security-association lifetime seconds 3600\"\n",
	  "ios-config-18=\"set transform-set ipsec-prop-vpn-aws\"\n",
	  "ios-config-19=\"router bgp ", { "Ref" : "BgpAsn" },"\"\n",
	  "ios-config-20=\"bgp log-neighbor-changes\"\n",
	  "ios-config-21=\"ip vrf vpn0\"\n",
	  "ios-config-22=\"rd ", { "Ref" : "BgpAsn" }, ":0\"\n",
	  "ios-config-23=\"ip ssh pubkey-chain\"\n",
	  "ios-config-24=\"username ", { "Fn::FindInMap" : [ "Function", "Csr", "UserName"]}, "\"\n",
	  "ios-config-25=\"key-hash ssh-rsa ", { "Fn::GetAtt" : [ "CreateRsaKey", "Fingerprint" ] },"\"\n",
	  "ios-config-26=\"ip ssh server algorithm authentication publickey\"\n",
	  "ios-config-27=\"ip ssh maxstartups 1\"\n"
        ]]}}
      }
    },
    "VpcCsr2" : {
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "Comment1" : "Launch Cisco CSR2"
      },
      "Properties" : {
        "InstanceType" : { "Fn::FindInMap" : [ "CsrInstance", { "Ref" : "CSRType" }, "Type"] },
        "KeyName" : { "Ref" : "KeyName" },
        "DisableApiTermination" : {"Fn::If": ["EnableTerm", true, false ]},
        "ImageId"        : {"Fn::GetAtt": ["GetAMI", "AMIInfo"]},
        "SubnetId" : { "Ref" : "VPCPubSub2" },
        "SecurityGroupIds" : [{ "Ref" : "CSRSecurityGroup" }],
        "Tags" : [
          { "Key" : "Name", "Value" : "Transit VPC CSR2" }
        ],
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
	  "ios-config-1=\"username ",
	  { "Fn::FindInMap" : [ "Function", "Csr", "UserName"]},
	  " priv 15 pass ", 
	  { "Fn::GetAtt" : [ "CreateRandomPassword" , "Password" ] },"\"\n",
	  "ios-config-2=\"service password-encryption\"\n",
	  "ios-config-3=\"crypto isakmp policy 200\"\n",
  	"ios-config-4=\"encryption aes 128\"\n",
  	"ios-config-5=\"authentication pre-share\"\n",
	  "ios-config-6=\"group 2\"\n",
  	"ios-config-7=\"lifetime 28800\"\n",
  	"ios-config-8=\"hash sha\"\n",
	  "ios-config-9=\"crypto ipsec transform-set ipsec-prop-vpn-aws esp-aes 128 esp-sha-hmac\"\n",
	  "ios-config-10=\"mode tunnel\"\n",
	  "ios-config-11=\"crypto ipsec df-bit clear\"\n",
	  "ios-config-12=\"crypto isakmp keepalive 10 10 on-demand\"\n",
	  "ios-config-13=\"crypto ipsec security-association replay window-size 1024\"\n",
	  "ios-config-14=\"crypto ipsec fragmentation before-encryption\"\n",
	  "ios-config-15=\"crypto ipsec profile ipsec-vpn-aws\"\n",
	  "ios-config-16=\"set pfs group2\"\n",
	  "ios-config-17=\"set security-association lifetime seconds 3600\"\n",
	  "ios-config-18=\"set transform-set ipsec-prop-vpn-aws\"\n",
	  "ios-config-19=\"router bgp ", { "Ref" : "BgpAsn" },"\"\n",
	  "ios-config-20=\"bgp log-neighbor-changes\"\n",
	  "ios-config-21=\"ip vrf vpn0\"\n",
	  "ios-config-22=\"rd ", { "Ref" : "BgpAsn" }, ":0\"\n",
	  "ios-config-23=\"ip ssh pubkey-chain\"\n",
	  "ios-config-24=\"username ", { "Fn::FindInMap" : [ "Function", "Csr", "UserName"]}, "\"\n",
	  "ios-config-25=\"key-hash ssh-rsa ", { "Fn::GetAtt" : [ "CreateRsaKey", "Fingerprint" ] },"\"\n",
	  "ios-config-26=\"ip ssh server algorithm authentication publickey\"\n",
	  "ios-config-27=\"ip ssh maxstartups 1\"\n"
        ]]}}
      }
    },
    "SolutionHelperRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {
              "Service": "lambda.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
          } ]
        },
        "Path": "/"
      }
   },
    "SolutionHelperRolePolicy" : {
      "Type": "AWS::IAM::Policy",
      "Properties": {
	  "Roles" : [ { "Ref" : "SolutionHelperRole" } ],
          "PolicyName": "Solution_Helper_Permissions",
          "PolicyDocument": {
              "Version" : "2012-10-17",
	      "Statement": [
		{
		  "Effect": "Allow",
		  "Action": ["logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents"],
		  "Resource": { "Fn::Join" : ["", ["arn:aws:logs:",{"Ref" : "AWS::Region"},":",{ "Ref" : "AWS::AccountId" }, ":log-group:/aws/lambda/*" ]]}
		},
		{
		  "Effect": "Allow",
		  "Action": ["kms:Encrypt", "kms:Decrypt", "kms:ReEncrypt*", "kms:GenerateDataKey*", "kms:DescribeKey", "kms:GetKeyPolicy", "kms:PutKeyPolicy"],
		  "Resource": { "Fn::Join" : ["", ["arn:aws:kms:",{"Ref" : "AWS::Region"},":",{ "Ref" : "AWS::AccountId" }, ":key/", { "Ref" : "KMSKey" } ]]}
		},
		{
		  "Effect": "Allow",
		  "Action": ["s3:PutBucketNotification", "s3:GetBucketPolicy", "s3:PutBucketPolicy"],
		  "Resource": { "Fn::Join": ["", ["arn:aws:s3:::", { "Ref" : "VPNConfigS3Bucket" } ]] }
		},
		{
		  "Effect": "Allow",
		  "Action": ["lambda:*", "events:*", "ec2:DescribeSecurityGroups", "ec2:DescribeSubnets", "ec2:DescribeVpcs"],
		  "Resource": "*"
		},
		{
		  "Effect": "Allow",
		  "Action": ["iam:PassRole"],
		  "Resource": [{ "Fn::GetAtt" : [ "CiscoConfigFunctionRole", "Arn" ] }]
		},
		{
		  "Effect": "Allow",
		  "Action": ["s3:PutObject", "s3:GetObject", "s3:DeleteObject"],
		  "Resource": { "Fn::Join": ["", ["arn:aws:s3:::", { "Ref" : "VPNConfigS3Bucket" }, "/", {"Ref": "S3Prefix"}, "*" ]] }
		},
		{
		  "Effect": "Allow",
		  "Action": ["s3:GetObject"],
		  "Resource": "arn:aws:s3:::*"
		}
	     ]
        }
      }
   },
    "SolutionHelper": {
      "Type": "AWS::Lambda::Function",
      "DependsOn" : "SolutionHelperRolePolicy",
      "Properties": {
      	"Handler": "solution-helper.lambda_handler",
      	"Role": { "Fn::GetAtt" : [ "SolutionHelperRole" , "Arn" ] },
        "Description": "Transit VPC: CloudFormation custom resource function invoked during transit VPC CloudFormation create, update, and delete stack operations.",
      	"Code": {
          "S3Bucket": { "Fn::Join": ["", ["cisco-csr-tvpc-dmvpn-", {"Ref" : "AWS::Region"}]] },
      	  "S3Key": "latest/transit-vpc/solution-helper/solution-helper.zip"
      	},
      	"Runtime": "python2.7",
      	"Timeout": "60"
     }
   },
   "CreateRsaKey": {
     "Type": "Custom::LoadLambda",
     "Properties": {
       "ServiceToken": { "Fn::GetAtt" : ["SolutionHelper", "Arn"] },
       "Region": { "Ref": "AWS::Region" },
       "CreateSshKey" : { "Fn::Join": ["", [
		"{ 'Bucket' : '",{ "Ref" : "VPNConfigS3Bucket" },"', ",
		"'SSEKMSKeyId' : 'arn:aws:kms:",{"Ref" : "AWS::Region"},":",{ "Ref" : "AWS::AccountId" }, ":key/", { "Ref" : "KMSKey" }, "', ", 
		"'PrivateKey' : '", { "Ref" : "S3Prefix" }, { "Fn::FindInMap" : [ "Function", "Csr", "PrivateKey"]}, "', ", 
		"'PublicKey' : '", { "Ref" : "S3Prefix" }, { "Fn::FindInMap" : [ "Function", "Csr", "PublicKey"]}, "' ",
		"}"
	]] }
     }
   },
   "CreateRandomPassword": {
     "Type": "Custom::LoadLambda",
     "Properties": {
       "ServiceToken": { "Fn::GetAtt" : ["SolutionHelper", "Arn"] },
       "Region": { "Ref": "AWS::Region" },
       "CreateRandomPassword" : { "Fn::FindInMap" : [ "Function", "Csr", "PasswordLength"]},
       "RandomPasswordSpecialCharacters": "False"
     }
   },
   "AddRemoveAdditionalAccount": {
      "Type": "Custom::LoadLambda",
      "Properties": {
         "ServiceToken": {"Fn::GetAtt": ["SolutionHelper", "Arn"]},
         "AddRemoveAdditionalAccount" : { "Fn::Join": ["", [
                "{'AddRemove' : '",{ "Ref" : "AddRemoveAccount" },"', ",
                "'S3Bucket' : '",{ "Ref" : "VPNConfigS3Bucket" },"', ",
                "'SSEKMSKeyId' : 'arn:aws:kms:",{"Ref" : "AWS::Region"},":",{ "Ref" : "AWS::AccountId" }, ":key/", { "Ref" : "KMSKey" }, "', ", 
                "'AddtionalAccountId' : '", {"Ref" : "AccountId" }, "' ",
                "}"
         ]] }
      }
   },          
   "CiscoConfigFunctionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {
              "Service": "lambda.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
          } ]
        },
        "Path": "/"
      }
   },
    "CiscoConfigFunctionRolePolicy" : {
      "Type": "AWS::IAM::Policy",
      "Properties": {
	  "Roles" : [ { "Ref" : "CiscoConfigFunctionRole" } ],
          "PolicyName": "Cisco_Config_Permissions",
          "PolicyDocument": {
            "Version" : "2012-10-17",
	    "Statement": [
		{
		  "Effect": "Allow",
		  "Action": [
		    "logs:CreateLogGroup",
		    "logs:CreateLogStream",
		    "logs:PutLogEvents"
		  ],
		  "Resource": { "Fn::Join" : ["", ["arn:aws:logs:",{"Ref" : "AWS::Region"},":",{ "Ref" : "AWS::AccountId" }, ":log-group:/aws/lambda/*" ]]}
		},
		{
		  "Effect": "Allow",
		  "Action": [
                    "ec2:CreateNetworkInterface",
        	    "ec2:DescribeNetworkInterfaces",
        	    "ec2:DetachNetworkInterface",
        	    "ec2:DeleteNetworkInterface"
		  ],
		  "Resource": "*"
		},
		{
		  "Effect": "Allow",
		  "Action": [
		    "kms:Encrypt",
		    "kms:Decrypt",
		    "kms:ReEncrypt*",
		    "kms:GenerateDataKey*",
		    "kms:DescribeKey"
		  ],
		  "Resource": { "Fn::Join" : ["", ["arn:aws:kms:",{"Ref" : "AWS::Region"},":",{ "Ref" : "AWS::AccountId" }, ":key/", { "Ref" : "KMSKey" } ]]}
		},
		{
		  "Effect": "Allow",
		  "Action": [
                    "s3:PutObject",
                    "s3:GetObject",
                    "s3:GetBucketPolicy",
                    "s3:PutBucketPolicy"
		  ],
		  "Resource": { "Fn::Join": ["", ["arn:aws:s3:::", { "Ref" : "VPNConfigS3Bucket" }, "/", {"Ref": "S3Prefix"}, "*" ]] }
		}
	     ]
        }
      }
   },
   "CiscoConfigFunct": {
     "Type": "Custom::LoadLambda",
     "Properties": {
       "ServiceToken": { "Fn::GetAtt" : ["SolutionHelper", "Arn"] },
       "Region": { "Ref": "AWS::Region" },
       "LambdaCode": { "Fn::FindInMap" : [ "Function", "Configurator", "CodeLocation"]},
       "LambdaCodeRegion": { "Fn::FindInMap" : [ "Function", "Configurator", "CodeRegion"]},
       "FunctionName": { "Fn::Join": ["", [ { "Ref" : "AWS::StackName" }, "-", { "Fn::FindInMap" : [ "Function", "Configurator", "Name"]}	]] },
       "Role": { "Fn::GetAtt" : [ "CiscoConfigFunctionRole", "Arn" ] },
       "Runtime": { "Fn::FindInMap" : [ "Function", "Configurator", "Runtime"]},
       "Description": { "Fn::FindInMap" : [ "Function", "Configurator", "Description"]},
       "Timeout": { "Fn::FindInMap" : [ "Function", "Configurator", "Timeout"]},
       "MemorySize": { "Fn::FindInMap" : [ "Function", "Configurator", "MemorySize"]},
       "VpcConfig" : { "Fn::Join": ["", [
		"{ 'SubnetIds': [",
		    "'",{ "Ref" : "VPCPubSub1" }, "',",
		    "'",{ "Ref" : "VPCPubSub2" }, "'],",
	        "'SecurityGroupIds': [",
            	    "'",{ "Ref" : "CiscoConfigSecurityGroup" }, "']",
    		"}"
		]] },
       "S3Event" : { "Fn::Join": ["", [
		"{ 'Bucket' : '",{ "Ref" : "VPNConfigS3Bucket" },"', ",
		"'EventPattern' : {",
			"'LambdaFunctionConfigurations' : [ {",
                	    "'LambdaFunctionArn': 'Replace_by_SolutionHelper',",
                	    "'Events': ['s3:ObjectCreated:Put' ],",
                	    "'Filter': {",
                    		"'Key': {",
                        	    "'FilterRules': [ {",
                                	"'Name': 'prefix',",
                                	"'Value': '",{ "Ref" : "S3Prefix" },"'",
                            	    "}, {",
                                	"'Name': 'suffix',",
                                	"'Value': '.conf'",
                            	    "} ] } }",
                            "} ] }",
		"}"
	]] },
       "StoreInS3KMS" : { "Fn::Join": ["", [
		"[{ 'Bucket' : '",{ "Ref" : "VPNConfigS3Bucket" },"', ",
		"'Key' : '", { "Ref" : "S3Prefix" }, "transit_vpc_config.txt', ", 
		"'SSEKMSKeyId' : 'arn:aws:kms:",{"Ref" : "AWS::Region"},":",{ "Ref" : "AWS::AccountId" }, ":key/", { "Ref" : "KMSKey" }, "', ", 
		"'Body': \"{",
		    "'UUID':'",{"Fn::GetAtt": [ "CreateUniqueID", "UUID" ] },"',",
		    "'SENDDATA':'",{"Ref" : "SendAnonymousData"},"',",
		    "'EIP1':'",{ "Ref" : "CsrEip1" },"',",
		    "'EIP2':'",{ "Ref" : "CsrEip2" },"',",
		    "'PIP1':'",{ "Fn::GetAtt" : [ "VpcCsr1", "PrivateIp" ] },"',",
		    "'PIP2':'",{ "Fn::GetAtt" : [ "VpcCsr2", "PrivateIp" ] },"',",
		    "'BGP_ASN':'",{ "Ref" : "BgpAsn" },"',",
		    "'USER_NAME':'",{ "Fn::FindInMap" : [ "Function", "Csr", "UserName"]},"',",
		    "'PRIVATE_KEY':'",{ "Fn::FindInMap" : [ "Function", "Csr", "PrivateKey"]},"',",
		    "'PUBLIC_KEY':'",{ "Fn::GetAtt" : [ "CreateRsaKey", "PubKey" ] },"',",
		    "'PASSWORD':'",{ "Fn::GetAtt" : [ "CreateRandomPassword" , "Password" ] },"',",
		    "'KMS_KEY':'arn:aws:kms:",{"Ref" : "AWS::Region"},":",{ "Ref" : "AWS::AccountId" }, ":key/", { "Ref" : "KMSKey" },"'",
		    "}\"",
		"}]"
	]] }
     }
   },
    "CSRSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "CSR Security Group Rules",
        "VpcId" : { "Ref" : "TransitVPC" },
        "SecurityGroupIngress" : [
           { "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "SourceSecurityGroupId" : { "Ref" : "CiscoConfigSecurityGroup" }}
	],
        "SecurityGroupEgress" : [
           { "IpProtocol" : "-1", "FromPort" : "0", "ToPort" : "65535", "CidrIp" : "0.0.0.0/0" } ]
      }
    },
    "CiscoConfigSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Transit VPC Automation Security Group Rules",
        "VpcId" : { "Ref" : "TransitVPC" },
        "SecurityGroupEgress" : [{ "IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : "0.0.0.0/0" }]
      }
    },
    "SSHtoCSR": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties":{
        "IpProtocol": "tcp",
        "FromPort": "22",
        "ToPort": "22",
        "DestinationSecurityGroupId": {
          "Fn::GetAtt": [
            "CSRSecurityGroup",
            "GroupId"
          ]
        },
        "GroupId": {
          "Fn::GetAtt": [
            "CiscoConfigSecurityGroup",
            "GroupId"
          ]
        }
      }
    },
    "CSR1RecoveryAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Trigger a recovery when CSR1 instance status check fails for 15 consecutive minutes.",
        "Namespace": "AWS/EC2" ,
        "MetricName": "StatusCheckFailed_System",
        "Statistic": "Minimum",
        "Period": "60",
        "EvaluationPeriods": "15",
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": "0",
        "AlarmActions": [ {"Fn::Join" : ["", ["arn:aws:automate:", { "Ref" : "AWS::Region" }, ":ec2:recover" ]]} ],
        "Dimensions": [{"Name": "InstanceId","Value": {"Ref": "VpcCsr1"}}]
      }
    },
    "CSR2RecoveryAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Trigger a recovery when CSR2 instance status check fails for 15 consecutive minutes.",
        "Namespace": "AWS/EC2" ,
        "MetricName": "StatusCheckFailed_System",
        "Statistic": "Minimum",
        "Period": "60",
        "EvaluationPeriods": "15",
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": "0",
        "AlarmActions": [ {"Fn::Join" : ["", ["arn:aws:automate:", { "Ref" : "AWS::Region" }, ":ec2:recover" ]]} ],
        "Dimensions": [{"Name": "InstanceId","Value": {"Ref": "VpcCsr2"}}]
      }
    },
    "CreateUniqueID": {
         "Type": "Custom::LoadLambda",
         "Properties": {
             "ServiceToken": { "Fn::GetAtt": ["SolutionHelper", "Arn"] },
             "Region": { "Ref": "AWS::Region" },
             "CreateUniqueID": "true"
         }
    },
    "SendingData": {
        "Type": "Custom::LoadLambda",
        "Condition" : "SendData",
        "Properties": {
            "ServiceToken": { "Fn::GetAtt": ["SolutionHelper", "Arn"] },
            "SendAnonymousData": { "Fn::Join": ["", [
                "{ 'Solution' : '", "SO0001", "', ",
                  "'UUID' : '", {"Fn::GetAtt": ["CreateUniqueID", "UUID"]}, "', ",
                  "'Data': {", "'CSRType': '", {"Ref": "CSRType"}, "',",
                               "'LicenseModel': '", {"Ref": "LicenseModel"}, "'",
                          "}",
                "}"
              ]]
            }
        }
    }
  },
  "Outputs" : {
    "CSR1" : {
      "Description" : "IP Address for CSR1",
      "Value" : { "Fn::GetAtt" : [ "VpcCsr1", "PublicIp" ] } 
    },
    "CSR2" : {
      "Description" : "IP Address for CSR2",
      "Value" : { "Fn::GetAtt" : [ "VpcCsr2", "PublicIp" ] } 
    },
    "ConfigS3Bucket" : {
      "Description" : "S3 bucket for storing VPN configuration information.",
      "Value" : { "Ref" : "VPNConfigS3Bucket" } 
    },
    "BucketPrefix" : {
      "Description" : "S3 prefix for storing VPN configuration information.",
      "Value" : { "Ref" : "S3Prefix" } 
    },
    "UUID": {
      "Description": "Newly created random UUID.",
      "Value": { "Fn::GetAtt": [ "CreateUniqueID", "UUID" ] } 
    },
    "AddRemoveAdditionalAccountStatus": {
      "Description": "Additional account updates.",
      "Value": { "Fn::GetAtt": [ "AddRemoveAdditionalAccount", "AddRemoveStatus" ] } 
    }
  }
}
